
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004fc  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  000005a0  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001c4  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000906  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e2  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000950  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b1  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"lcd.h"
#include"timer.h"
#include"waterlevel.h"

int main()
{
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	9c e9       	ldi	r25, 0x9C	; 156
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0xe>
 /*													   */
 /******************************************************/

 _delay_ms(20);  	//wait for some voltage jerks

 HEATER_DDR|=(1<<HEATER_PIN_NUMBER);
  a4:	a5 9a       	sbi	0x14, 5	; 20
 HEATER_PORT&=~(1<<HEATER_PIN_NUMBER);
  a6:	ad 98       	cbi	0x15, 5	; 21

 WATERLEVEL_DDR&=~((1<<WATERLEVEL_UP_SENSOR)|(1<<WATERLEVEL_DOWN_SENSOR));
  a8:	84 b3       	in	r24, 0x14	; 20
  aa:	8c 7f       	andi	r24, 0xFC	; 252
  ac:	84 bb       	out	0x14, r24	; 20
 WATERLEVEL_PORT|=(1<<WATERLEVEL_UP_SENSOR)|(1<<WATERLEVEL_DOWN_SENSOR); 
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	85 bb       	out	0x15, r24	; 21
 
 WATERMOTOR_DDR|=(1<<WATERMOTOR_PIN_NUMBER);
  b4:	a2 9a       	sbi	0x14, 2	; 20
 WATERMOTOR_PORT&=~(1<<WATERMOTOR_PIN_NUMBER);
  b6:	aa 98       	cbi	0x15, 2	; 21

 EXHAUSTMOTOR_DDR|=(1<<EXHAUSTMOTOR_PIN_NUMBER);
  b8:	a3 9a       	sbi	0x14, 3	; 20
 EXHAUSTMOTOR_PORT&=~(1<<EXHAUSTMOTOR_PIN_NUMBER);
  ba:	ab 98       	cbi	0x15, 3	; 21
 
 FEEDMOTOR_DDR|=(1<<FEEDMOTOR_PIN_NUMBER);
  bc:	a4 9a       	sbi	0x14, 4	; 20
 FEEDMOTOR_PORT&=~(1<<FEEDMOTOR_PIN_NUMBER);
  be:	ac 98       	cbi	0x15, 4	; 21
 
 BUZZER_DDR|=(1<<BUZZER_PIN_NUMBER);
  c0:	a6 9a       	sbi	0x14, 6	; 20
 BUZZER_PORT|=(1<<BUZZER_PIN_NUMBER);
  c2:	ae 9a       	sbi	0x15, 6	; 21
 
 LDR_DDR&=~(1<<LDR_PIN_NUMBER);
  c4:	b8 98       	cbi	0x17, 0	; 23
 LDR_PORT&=~(1<<LDR_PIN_NUMBER);
  c6:	c0 98       	cbi	0x18, 0	; 24

 initADC(); 	 	//init ADC
  c8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <initADC>
 initLCD(0);		//InitLCD
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <initLCD>
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	28 ec       	ldi	r18, 0xC8	; 200
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x48>
 _delay_ms(50);  	//wait for ADC and LCD warmup
 LCDClear();
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	0e 94 15 01 	call	0x22a	; 0x22a <Send>

 startTimer();	 	//start timer0
  ec:	0e 94 08 02 	call	0x410	; 0x410 <startTimer>
  f0:	ff 24       	eor	r15, r15
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	56 c0       	rjmp	.+172    	; 0x1a2 <main+0x110>
  f6:	01 e0       	ldi	r16, 0x01	; 1
  f8:	c1 e0       	ldi	r28, 0x01	; 1
  fa:	d0 e0       	ldi	r29, 0x00	; 0
   /*												   	 */
   /*					  LIGHT    						 */	
   /*													 */
   /******************************************************/

	if(LDR_PIN&(1<<LDR_PIN_NUMBER))
  fc:	b0 9b       	sbis	0x16, 0	; 22
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x72>
	 {
	  BUZZER_PORT|=(1<<BUZZER_PIN_NUMBER);	  
 100:	ae 9a       	sbi	0x15, 6	; 21
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x74>
	 }
   else
     {
	  BUZZER_PORT&=~(1<<BUZZER_PIN_NUMBER);	  
 104:	ae 98       	cbi	0x15, 6	; 21
   /*												   	 */
   /*					  TEMPERATURE					 */	
   /*													 */
   /******************************************************/

   iTemp=getTemperature(); //temperature in celcius
 106:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <getTemperature>
 10a:	18 2f       	mov	r17, r24
   LCDGotoXY(0,0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
   LCDWriteString("Temperature:");
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 4d 01 	call	0x29a	; 0x29a <LCDWriteString>
   LCDWriteInt(iTemp,2);
 11c:	81 2f       	mov	r24, r17
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCDWriteInt>
   LCDWriteCustomChar(DEGREE);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 04 02 	call	0x408	; 0x408 <LCDWriteCustomChar>
   LCDWriteString("C");
 12c:	8d e6       	ldi	r24, 0x6D	; 109
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 4d 01 	call	0x29a	; 0x29a <LCDWriteString>
   /*												   	 */
   /*						HEATER						 */	
   /*													 */
   /******************************************************/

   if(iTemp>0 && iTemp<36)
 134:	11 50       	subi	r17, 0x01	; 1
 136:	13 32       	cpi	r17, 0x23	; 35
 138:	10 f4       	brcc	.+4      	; 0x13e <main+0xac>
    {
	 //heater on...
	 HEATER_PORT|=(1<<HEATER_PIN_NUMBER);
 13a:	ad 9a       	sbi	0x15, 5	; 21
 13c:	01 c0       	rjmp	.+2      	; 0x140 <main+0xae>
	}
   else
    {
	 //heater off...
	 HEATER_PORT&=~(1<<HEATER_PIN_NUMBER);
 13e:	ad 98       	cbi	0x15, 5	; 21
   /*												   	 */
   /*					WATER TANK						 */	
   /*													 */
   /******************************************************/
	
	if(isWaterEmpty())
 140:	0e 94 55 02 	call	0x4aa	; 0x4aa <isWaterEmpty>
 144:	88 23       	and	r24, r24
 146:	11 f0       	breq	.+4      	; 0x14c <main+0xba>
	 {
	  //start the water motor
	  WATERMOTOR_PORT|=(1<<WATERMOTOR_PIN_NUMBER);
 148:	aa 9a       	sbi	0x15, 2	; 21
 14a:	04 c0       	rjmp	.+8      	; 0x154 <main+0xc2>
	 }
	else if(isWaterFull())
 14c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <isWaterFull>
 150:	81 11       	cpse	r24, r1
	 {
	  //stop the water motor
	  WATERMOTOR_PORT&=~(1<<WATERMOTOR_PIN_NUMBER);
 152:	aa 98       	cbi	0x15, 2	; 21
   /*												   	 */
   /*				EXHAUST FAN							 */	
   /*													 */
   /******************************************************/

   if(getFanTime()>=600 && iExhaustFanOn==0) //10 minute past
 154:	0e 94 0d 02 	call	0x41a	; 0x41a <getFanTime>
 158:	88 55       	subi	r24, 0x58	; 88
 15a:	92 40       	sbci	r25, 0x02	; 2
 15c:	40 f0       	brcs	.+16     	; 0x16e <main+0xdc>
 15e:	ff 20       	and	r15, r15
 160:	31 f4       	brne	.+12     	; 0x16e <main+0xdc>
    {

	 //start the fan motor
	 EXHAUSTMOTOR_PORT|=(1<<EXHAUSTMOTOR_PIN_NUMBER);
 162:	ab 9a       	sbi	0x15, 3	; 21

	 iExhaustFanOn=1;    //need to be off now
	 resetFanTime();    //reset fan timer
 164:	0e 94 19 02 	call	0x432	; 0x432 <resetFanTime>
 168:	ff 24       	eor	r15, r15
 16a:	f3 94       	inc	r15
 16c:	0b c0       	rjmp	.+22     	; 0x184 <main+0xf2>
	}
   else if(getFanTime()>=60 && iExhaustFanOn==1) //1 minute past
 16e:	0e 94 0d 02 	call	0x41a	; 0x41a <getFanTime>
 172:	cc 97       	sbiw	r24, 0x3c	; 60
 174:	38 f0       	brcs	.+14     	; 0x184 <main+0xf2>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	f8 16       	cp	r15, r24
 17a:	19 f4       	brne	.+6      	; 0x182 <main+0xf0>
    {
		 
	 //stop the fan motor
	 EXHAUSTMOTOR_PORT&=~(1<<EXHAUSTMOTOR_PIN_NUMBER);
 17c:	ab 98       	cbi	0x15, 3	; 21

	 iExhaustFanOn=0;
	 resetFanTime();  //reset fan timer
 17e:	0e 94 19 02 	call	0x432	; 0x432 <resetFanTime>
 182:	ff 24       	eor	r15, r15
   /*				    FEED MOTOR						 */	
   /*													 */
   /******************************************************/


   if(getFeedTime()>=iFeedVarier && iFeedMotorOn==0) //5 min or 3 sec
 184:	0e 94 13 02 	call	0x426	; 0x426 <getFeedTime>
 188:	8c 17       	cp	r24, r28
 18a:	9d 07       	cpc	r25, r29
 18c:	68 f0       	brcs	.+26     	; 0x1a8 <main+0x116>
 18e:	00 23       	and	r16, r16
 190:	59 f4       	brne	.+22     	; 0x1a8 <main+0x116>
    {
	 
	 FEEDMOTOR_PORT|=(1<<FEEDMOTOR_PIN_NUMBER);
 192:	ac 9a       	sbi	0x15, 4	; 21
	 
	 iFeedMotorOn=1;
	 resetFeedTime();
 194:	0e 94 1e 02 	call	0x43c	; 0x43c <resetFeedTime>
     
	 if(iFeedVarier==300)
 198:	cc 52       	subi	r28, 0x2C	; 44
 19a:	d1 40       	sbci	r29, 0x01	; 1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0x10e>
 19e:	ab cf       	rjmp	.-170    	; 0xf6 <main+0x64>
 1a0:	01 e0       	ldi	r16, 0x01	; 1
 1a2:	cc e2       	ldi	r28, 0x2C	; 44
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
 1a6:	aa cf       	rjmp	.-172    	; 0xfc <main+0x6a>
	  iFeedVarier=1; //switch back to 1 sec
	 else
	  iFeedVarier=300; //switch back to 5 min
	}

   else if(getFeedTime()>=1 && iFeedMotorOn==1) //1 sec on
 1a8:	0e 94 13 02 	call	0x426	; 0x426 <getFeedTime>
 1ac:	89 2b       	or	r24, r25
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <main+0x120>
 1b0:	a5 cf       	rjmp	.-182    	; 0xfc <main+0x6a>
 1b2:	01 30       	cpi	r16, 0x01	; 1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <main+0x12a>
    {
	 
	 FEEDMOTOR_PORT&=~(1<<FEEDMOTOR_PIN_NUMBER);
 1b6:	ac 98       	cbi	0x15, 4	; 21

	 iFeedMotorOn=0;
	 resetFeedTime();
 1b8:	0e 94 1e 02 	call	0x43c	; 0x43c <resetFeedTime>
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	9e cf       	rjmp	.-196    	; 0xfc <main+0x6a>

000001c0 <initADC>:

#include"temperature.h"

void initADC()
{
  ADMUX=(1<<REFS0)|(1<<REFS1);                       // For Aref=AVcc;
 1c0:	80 ec       	ldi	r24, 0xC0	; 192
 1c2:	87 b9       	out	0x07, r24	; 7
  ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 1c4:	87 e8       	ldi	r24, 0x87	; 135
 1c6:	86 b9       	out	0x06, r24	; 6
}
 1c8:	08 95       	ret

000001ca <readADC>:

uint16_t readADC(uint8_t ch)
{
   ADMUX&=0b11110000;
 1ca:	97 b1       	in	r25, 0x07	; 7
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	97 b9       	out	0x07, r25	; 7
   ch=ch&0b00000111;
   ADMUX|=ch;
 1d0:	97 b1       	in	r25, 0x07	; 7
 1d2:	87 70       	andi	r24, 0x07	; 7
 1d4:	89 2b       	or	r24, r25
 1d6:	87 b9       	out	0x07, r24	; 7

   ADCSRA|=(1<<ADSC);
 1d8:	36 9a       	sbi	0x06, 6	; 6

   while(!(ADCSRA & (1<<ADIF)));
 1da:	34 9b       	sbis	0x06, 4	; 6
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <readADC+0x10>

   ADCSRA|=(1<<ADIF);
 1de:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
 1e0:	24 b1       	in	r18, 0x04	; 4
 1e2:	35 b1       	in	r19, 0x05	; 5
}
 1e4:	c9 01       	movw	r24, r18
 1e6:	08 95       	ret

000001e8 <getTemperature>:

uint8_t getTemperature()
{
 uint8_t temp;
 
 temp=readADC(ADC_TEMPERATURE_PIN);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 e5 00 	call	0x1ca	; 0x1ca <readADC>
 // 1adc--- (2.56*1000)/1023 mV
 // temp adc -- 2.56*1000*temp)/(10230)

 return temp/4;

}
 1ee:	86 95       	lsr	r24
 1f0:	86 95       	lsr	r24
 1f2:	08 95       	ret

000001f4 <wait_till_busy>:
void wait_till_busy()
{
 
 uint8_t status;

 DDRD&=0x0F;
 1f4:	81 b3       	in	r24, 0x11	; 17
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	81 bb       	out	0x11, r24	; 17

 HIGH(PORTD,RW);
 1fa:	91 9a       	sbi	0x12, 1	; 18
 LOW(PORTD,RS);
 1fc:	90 98       	cbi	0x12, 0	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fe:	22 e0       	ldi	r18, 0x02	; 2

 do
  {
  	HIGH(PORTD,E);
 200:	92 9a       	sbi	0x12, 2	; 18
 202:	82 2f       	mov	r24, r18
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <wait_till_busy+0x10>
   	_delay_us(1);

   	status=(PIND&0xF0);
 208:	80 b3       	in	r24, 0x10	; 16

   	LOW(PORTD,E);
 20a:	92 98       	cbi	0x12, 2	; 18
 20c:	92 2f       	mov	r25, r18
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <wait_till_busy+0x1a>
   	_delay_us(1);
   	HIGH(PORTD,E);
 212:	92 9a       	sbi	0x12, 2	; 18
	
	status|=((PIND&0xF0)>>4);
 214:	90 b3       	in	r25, 0x10	; 16

	LOW(PORTD,E);
 216:	92 98       	cbi	0x12, 2	; 18
 218:	92 2f       	mov	r25, r18
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <wait_till_busy+0x26>
	_delay_us(1);
  
  }while(status & 0x80);
 21e:	87 fd       	sbrc	r24, 7
 220:	ef cf       	rjmp	.-34     	; 0x200 <wait_till_busy+0xc>
	
	DDRD|=0xF0;
 222:	81 b3       	in	r24, 0x11	; 17
 224:	80 6f       	ori	r24, 0xF0	; 240
 226:	81 bb       	out	0x11, r24	; 17
}
 228:	08 95       	ret

0000022a <Send>:

void Send(uint8_t cmd,uint8_t isdata)
{ 
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	08 2f       	mov	r16, r24
 230:	16 2f       	mov	r17, r22
 
	uint8_t temp;
 
 	wait_till_busy();
 232:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <wait_till_busy>

 	LOW(PORTD,RW);
 236:	91 98       	cbi	0x12, 1	; 18

 	if(isdata)
 238:	11 23       	and	r17, r17
 23a:	11 f0       	breq	.+4      	; 0x240 <Send+0x16>
  		HIGH(PORTD,RS);
 23c:	90 9a       	sbi	0x12, 0	; 18
 23e:	01 c0       	rjmp	.+2      	; 0x242 <Send+0x18>
 	else
  		LOW(PORTD,RS);
 240:	90 98       	cbi	0x12, 0	; 18
 
 	HIGH(PORTD,E);
 242:	92 9a       	sbi	0x12, 2	; 18
 244:	22 e0       	ldi	r18, 0x02	; 2
 246:	82 2f       	mov	r24, r18
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <Send+0x1e>
 	_delay_us(1);

 	temp=PORTD&0x0F;
 24c:	82 b3       	in	r24, 0x12	; 18
 	temp|=(cmd&0xF0);
 24e:	90 2f       	mov	r25, r16
 250:	90 7f       	andi	r25, 0xF0	; 240
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	98 2b       	or	r25, r24
 	PORTD=temp;
 256:	92 bb       	out	0x12, r25	; 18

 	LOW(PORTD,E);
 258:	92 98       	cbi	0x12, 2	; 18
 25a:	2a 95       	dec	r18
 25c:	f1 f7       	brne	.-4      	; 0x25a <Send+0x30>
 	_delay_us(1);
 	HIGH(PORTD,E);
 25e:	92 9a       	sbi	0x12, 2	; 18

 	temp=PORTD&0x0F;
 260:	82 b3       	in	r24, 0x12	; 18
 	temp|=((cmd&0x0F)<<4);
 262:	02 95       	swap	r16
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	80 2b       	or	r24, r16
 	PORTD=temp;
 26a:	82 bb       	out	0x12, r24	; 18

 	LOW(PORTD,E);
 26c:	92 98       	cbi	0x12, 2	; 18

}
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <LCDGotoXY>:
	initLCDCustomChar();
	LCDGotoXY(0,0);
}

void LCDGotoXY(uint8_t x,uint8_t y)
{
 274:	98 2f       	mov	r25, r24
  	uint8_t temp=0x80;

  	if(y==1)
 276:	61 30       	cpi	r22, 0x01	; 1
 278:	11 f4       	brne	.+4      	; 0x27e <LCDGotoXY+0xa>
 27a:	80 ec       	ldi	r24, 0xC0	; 192
 27c:	09 c0       	rjmp	.+18     	; 0x290 <LCDGotoXY+0x1c>
   		temp=0xC0;
	else if(y==2)
 27e:	62 30       	cpi	r22, 0x02	; 2
 280:	11 f4       	brne	.+4      	; 0x286 <LCDGotoXY+0x12>
 282:	84 e9       	ldi	r24, 0x94	; 148
 284:	05 c0       	rjmp	.+10     	; 0x290 <LCDGotoXY+0x1c>
		temp=0x94;
	else if(y==3)
 286:	63 30       	cpi	r22, 0x03	; 3
 288:	11 f4       	brne	.+4      	; 0x28e <LCDGotoXY+0x1a>
 28a:	84 ed       	ldi	r24, 0xD4	; 212
 28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDGotoXY+0x1c>
 28e:	80 e8       	ldi	r24, 0x80	; 128
		temp=0xD4;
	
	Send(temp+x,0);
 290:	89 0f       	add	r24, r25
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
}
 298:	08 95       	ret

0000029a <LCDWriteString>:

void LCDWriteString(char *szText)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <LCDWriteString+0x10>
	while(*szText)
	 Send(*szText++,1); 
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
	Send(temp+x,0);
}

void LCDWriteString(char *szText)
{
	while(*szText)
 2aa:	88 81       	ld	r24, Y
 2ac:	88 23       	and	r24, r24
 2ae:	c9 f7       	brne	.-14     	; 0x2a2 <LCDWriteString+0x8>
	 Send(*szText++,1); 
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCDWriteInt>:

void LCDWriteInt(uint16_t nNum,uint8_t nCount)
{
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <LCDWriteInt+0xe>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <LCDWriteInt+0x10>
 2c6:	0f 92       	push	r0
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	9c 01       	movw	r18, r24
 2ce:	06 2f       	mov	r16, r22
  uint8_t array[5]={0},iPos=0;
 2d0:	fe 01       	movw	r30, r28
 2d2:	31 96       	adiw	r30, 0x01	; 1
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	df 01       	movw	r26, r30
 2d8:	1d 92       	st	X+, r1
 2da:	8a 95       	dec	r24
 2dc:	e9 f7       	brne	.-6      	; 0x2d8 <LCDWriteInt+0x22>
 2de:	10 e0       	ldi	r17, 0x00	; 0
  int8_t i;
  
  while(nNum)
   {
    array[iPos]=nNum%10;
 2e0:	7f 01       	movw	r14, r30
 2e2:	10 c0       	rjmp	.+32     	; 0x304 <LCDWriteInt+0x4e>
 2e4:	f7 01       	movw	r30, r14
 2e6:	e1 0f       	add	r30, r17
 2e8:	f1 1d       	adc	r31, r1
 2ea:	c9 01       	movw	r24, r18
 2ec:	6a e0       	ldi	r22, 0x0A	; 10
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__udivmodhi4>
 2f4:	80 83       	st	Z, r24
	nNum/=10;
 2f6:	c9 01       	movw	r24, r18
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__udivmodhi4>
 300:	9b 01       	movw	r18, r22
	iPos++;
 302:	1f 5f       	subi	r17, 0xFF	; 255
void LCDWriteInt(uint16_t nNum,uint8_t nCount)
{
  uint8_t array[5]={0},iPos=0;
  int8_t i;
  
  while(nNum)
 304:	21 15       	cp	r18, r1
 306:	31 05       	cpc	r19, r1
 308:	69 f7       	brne	.-38     	; 0x2e4 <LCDWriteInt+0x2e>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <LCDWriteInt+0x60>
	nNum/=10;
	iPos++;
   }
  
  while(nCount--!=iPos)
      Send('0',1);
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 314:	01 50       	subi	r16, 0x01	; 1
    array[iPos]=nNum%10;
	nNum/=10;
	iPos++;
   }
  
  while(nCount--!=iPos)
 316:	01 17       	cp	r16, r17
 318:	c9 f7       	brne	.-14     	; 0x30c <LCDWriteInt+0x56>
      Send('0',1);

  for(i=iPos-1;i>=0;i--)
 31a:	f0 2e       	mov	r15, r16
 31c:	fa 94       	dec	r15
 31e:	8f 2d       	mov	r24, r15
 320:	99 27       	eor	r25, r25
 322:	87 fd       	sbrc	r24, 7
 324:	90 95       	com	r25
 326:	8e 01       	movw	r16, r28
 328:	0f 5f       	subi	r16, 0xFF	; 255
 32a:	1f 4f       	sbci	r17, 0xFF	; 255
 32c:	08 0f       	add	r16, r24
 32e:	19 1f       	adc	r17, r25
 330:	09 c0       	rjmp	.+18     	; 0x344 <LCDWriteInt+0x8e>
    Send('0'+array[i],1);
 332:	f8 01       	movw	r30, r16
 334:	80 81       	ld	r24, Z
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
   }
  
  while(nCount--!=iPos)
      Send('0',1);

  for(i=iPos-1;i>=0;i--)
 33e:	fa 94       	dec	r15
 340:	01 50       	subi	r16, 0x01	; 1
 342:	10 40       	sbci	r17, 0x00	; 0
 344:	f7 fe       	sbrs	r15, 7
 346:	f5 cf       	rjmp	.-22     	; 0x332 <LCDWriteInt+0x7c>
    Send('0'+array[i],1);

}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	08 95       	ret

00000360 <initLCDCustomChar>:

void initLCDCustomChar()
{
 Send(64,0);
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00001110,1);
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00010001,1);
 370:	81 e1       	ldi	r24, 0x11	; 17
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00010001,1);
 378:	81 e1       	ldi	r24, 0x11	; 17
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00001110,1);
 380:	8e e0       	ldi	r24, 0x0E	; 14
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00000000,1);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00000000,1);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00000000,1);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 Send(0b00000000,1);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
}
 3a8:	08 95       	ret

000003aa <initLCD>:
 	LOW(PORTD,E);

}

void initLCD(uint8_t flag)
{
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	1f 93       	push	r17
 3b0:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3b2:	80 e6       	ldi	r24, 0x60	; 96
 3b4:	9a ee       	ldi	r25, 0xEA	; 234
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <initLCD+0xc>
 	_delay_ms(30);				//Wait for stable power supply

	PORTD=0x00;					//Make all output low
 3ba:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;					//Make all line output
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	81 bb       	out	0x11, r24	; 17
	
	Send(0b00000010,0);			//Notify 4 bit mode
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 3c8:	88 ec       	ldi	r24, 0xC8	; 200
 3ca:	e8 2e       	mov	r14, r24
 3cc:	f1 2c       	mov	r15, r1
 3ce:	c7 01       	movw	r24, r14
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <initLCD+0x26>
	_delay_us(100);				//wait for sometime, BF cannot determine at this stage

	Send(0b00101000,0);  		//DB4=0 4 bit mode, DB3=1 lines>=2, DB2=0 5x7 display
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 3dc:	c7 01       	movw	r24, r14
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <initLCD+0x34>
	_delay_us(100);				//wait here for sometime no need to wait here after

	Send(0b00001100|flag,0);  	//DB4=1 Display Control DB3=1 
 3e2:	81 2f       	mov	r24, r17
 3e4:	8c 60       	ori	r24, 0x0C	; 12
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	9e e4       	ldi	r25, 0x4E	; 78
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD+0x46>
								//Display on DB2=1 Cursor on
								//DB0=1 Blink On
	
	_delay_ms(10);
	initLCDCustomChar();
 3f4:	0e 94 b0 01 	call	0x360	; 0x360 <initLCDCustomChar>
	LCDGotoXY(0,0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	0e 94 3a 01 	call	0x274	; 0x274 <LCDGotoXY>
}
 400:	1f 91       	pop	r17
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	08 95       	ret

00000408 <LCDWriteCustomChar>:
 Send(0b00000000,1);
}

void LCDWriteCustomChar(uint8_t uType)
{
 Send(uType,1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	0e 94 15 01 	call	0x22a	; 0x22a <Send>
}
 40e:	08 95       	ret

00000410 <startTimer>:
volatile uint16_t nSecond=0,nFeedTime=0;


void startTimer()
{
 TCCR0=(1<<CS00);   //prescalar 1
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	83 bf       	out	0x33, r24	; 51
 TIMSK=(1<<TOIE0);	//overflow interrupt enable
 414:	89 bf       	out	0x39, r24	; 57

 sei();
 416:	78 94       	sei
}
 418:	08 95       	ret

0000041a <getFanTime>:

uint16_t getFanTime()
{
 return nSecond;
 41a:	20 91 72 00 	lds	r18, 0x0072
 41e:	30 91 73 00 	lds	r19, 0x0073
}
 422:	c9 01       	movw	r24, r18
 424:	08 95       	ret

00000426 <getFeedTime>:

uint16_t getFeedTime()
{
 return nFeedTime;
 426:	20 91 74 00 	lds	r18, 0x0074
 42a:	30 91 75 00 	lds	r19, 0x0075
}
 42e:	c9 01       	movw	r24, r18
 430:	08 95       	ret

00000432 <resetFanTime>:

void resetFanTime()
{
 nSecond=0;
 432:	10 92 73 00 	sts	0x0073, r1
 436:	10 92 72 00 	sts	0x0072, r1
}
 43a:	08 95       	ret

0000043c <resetFeedTime>:

void resetFeedTime()
{
 nFeedTime=0;
 43c:	10 92 75 00 	sts	0x0075, r1
 440:	10 92 74 00 	sts	0x0074, r1
}
 444:	08 95       	ret

00000446 <__vector_11>:

ISR(TIMER0_OVF_vect) //TIMER0 overflow interrupt routine
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 overflowCounter++;
 456:	80 91 70 00 	lds	r24, 0x0070
 45a:	90 91 71 00 	lds	r25, 0x0071
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	90 93 71 00 	sts	0x0071, r25
 464:	80 93 70 00 	sts	0x0070, r24

 if(overflowCounter>31250) //this is only for 8Mhz
 468:	83 51       	subi	r24, 0x13	; 19
 46a:	9a 47       	sbci	r25, 0x7A	; 122
 46c:	b0 f0       	brcs	.+44     	; 0x49a <__vector_11+0x54>
  {
   overflowCounter=0;
 46e:	10 92 71 00 	sts	0x0071, r1
 472:	10 92 70 00 	sts	0x0070, r1
   nSecond++;
 476:	80 91 72 00 	lds	r24, 0x0072
 47a:	90 91 73 00 	lds	r25, 0x0073
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 73 00 	sts	0x0073, r25
 484:	80 93 72 00 	sts	0x0072, r24
   nFeedTime++;
 488:	80 91 74 00 	lds	r24, 0x0074
 48c:	90 91 75 00 	lds	r25, 0x0075
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	90 93 75 00 	sts	0x0075, r25
 496:	80 93 74 00 	sts	0x0074, r24
  }
}
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <isWaterEmpty>:
#include"waterlevel.h"


uint8_t isWaterEmpty()
{
 if(!(WATERLEVEL_PIN & (1<<WATERLEVEL_DOWN_SENSOR)) && 
 4aa:	98 9b       	sbis	0x13, 0	; 19
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <isWaterEmpty+0x8>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
 4b2:	83 b3       	in	r24, 0x13	; 19
 4b4:	86 95       	lsr	r24
 4b6:	80 95       	com	r24
 4b8:	81 70       	andi	r24, 0x01	; 1
    !(WATERLEVEL_PIN & (1<<WATERLEVEL_UP_SENSOR)))
	return 1;
 
 return 0;
}
 4ba:	08 95       	ret

000004bc <isWaterFull>:

uint8_t isWaterFull()
{
 if((WATERLEVEL_PIN & (1<<WATERLEVEL_DOWN_SENSOR)) &&
 4bc:	98 99       	sbic	0x13, 0	; 19
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <isWaterFull+0x8>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	83 b3       	in	r24, 0x13	; 19
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	81 70       	andi	r24, 0x01	; 1
    (WATERLEVEL_PIN & (1<<WATERLEVEL_UP_SENSOR)))
	return 1;

 return 0;
}
 4ce:	08 95       	ret

000004d0 <__udivmodhi4>:
 4d0:	aa 1b       	sub	r26, r26
 4d2:	bb 1b       	sub	r27, r27
 4d4:	51 e1       	ldi	r21, 0x11	; 17
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__udivmodhi4_ep>

000004d8 <__udivmodhi4_loop>:
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	a6 17       	cp	r26, r22
 4de:	b7 07       	cpc	r27, r23
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__udivmodhi4_ep>
 4e2:	a6 1b       	sub	r26, r22
 4e4:	b7 0b       	sbc	r27, r23

000004e6 <__udivmodhi4_ep>:
 4e6:	88 1f       	adc	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	5a 95       	dec	r21
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__udivmodhi4_loop>
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
